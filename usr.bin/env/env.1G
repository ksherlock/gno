.TH "ENV" "1" "April 17, 2008" "GNO" "General Commands Manual"
.SH "NAME"
\fBenv\fR
\- set environment and execute command, or print environment
.SH "SYNOPSIS"
.HP 4n
\fBenv\fR
[\fB\-iv\fR]
[\fB\-P\fR\ \fIaltpath\fR]
[\fB\-S\fR\ \fIstring\fR]
[\fB\-u\fR\ \fIname\fR]
[\fIname\fR=\fIvalue\ ...\fR]
[\fIutility\fR\ [\fIargument\ ...\fR]]
.SH "DESCRIPTION"
The
\fBenv\fR
utility executes another
\fIutility\fR
after modifying the environment as
specified on the command line.
Each
\fIname\fR=\fIvalue\fR
option specifies the setting of an environment variable,
\fIname\fR,
with a value of
\fIvalue\fR.
All such environment variables are set before the
\fIutility\fR
is executed.
.PP
The options are as follows:
.IP "\fB\-i\fR" 8n
Execute the
\fIutility\fR
with only those environment variables specified by
\fIname\fR=\fIvalue\fR
options.
The environment inherited
by
\fBenv\fR
is ignored completely.
.IP "\fB\-P\fR \fIaltpath\fR" 8n
Search the set of directories as specified by
\fIaltpath\fR
to locate the specified
\fIutility\fR
program, instead of using the value of the
\fRPATH\fR
environment variable.
.IP "\fB\-S\fR \fIstring\fR" 8n
Split apart the given
\fIstring\fR
into multiple strings, and process each of the resulting strings
as separate arguments to the
\fBenv\fR
utility.
The
\fB\-S\fR
option recognizes some special character escape sequences and
also supports environment-variable substitution, as described
below.
.IP "\fB\-u\fR \fIname\fR" 8n
If the environment variable
\fIname\fR
is in the environment, then remove it before processing the
remaining options.
This is similar to the
\fBunset\fR
command in
sh(1).
The value for
\fIname\fR
must not include the
\(oq=\(cq
character.
.IP "\fB\-v\fR" 8n
Print verbose information for each step of processing done by the
\fBenv\fR
utility.
Additional information will be printed if
\fB\-v\fR
is specified multiple times.
.PP
The above options are only recognized when they are specified
before any
\fIname\fR=\fIvalue\fR
options.
.PP
If no
\fIutility\fR
is specified,
\fBenv\fR
prints out the names and values
of the variables in the environment, with one name/value pair per line.
.SS "Details of \fB\-S\fR \fB\-Ss\fR \fB\-(split-string)\fR \fB\-processing\fR"
The processing of the
\fB\-S\fR
option will split the given
\fIstring\fR
into separate arguments based on any space or <tab> characters found in the
\fIstring\fR.
Each of those new arguments will then be treated as if it had been
specified as a separate argument on the original
\fBenv\fR
command.
.PP
Spaces and tabs may be embedded in one of those new arguments by using
single
(\(Lq\fR'\fR\(Rq)
or double
(\(oq\&"\(cq)
quotes, or backslashes
(\(oq\e\(cq).
Single quotes will escape all non-single quote characters, up to
the matching single quote.
Double quotes will escape all non-double quote characters, up to
the matching double quote.
It is an error if the end of the
\fIstring\fR
is reached before the matching quote character.
.PP
If
\fB\-S\fR
would create a new argument that starts with the
\(oq#\(cq
character, then that argument and the remainder of the
\fIstring\fR
will be ignored.
The
\(oq\e#\(cq
sequence can be used when you want a new argument to start
with a
\(oq#\(cq
character, without causing the remainder of the
\fIstring\fR
to be skipped.
.PP
While processing the
\fIstring\fR
value,
\fB\-S\fR
processing will treat certain character combinations as escape
sequences which represent some action to take.
The character escape sequences are in backslash notation.
The characters and their meanings are as follows:
.PP
.RS 6n
.PD 0
.IP "\fB\ec\fR" 8n
Ignore the remaining characters in the
\fIstring\fR.
This must not appear inside a double-quoted string.
.IP "\fB\ef\fR" 8n
Replace with a <form-feed> character.
.IP "\fB\en\fR" 8n
Replace with a <new-line> character.
.IP "\fB\er\fR" 8n
Replace with a <carriage return> character.
.IP "\fB\et\fR" 8n
Replace with a <tab> character.
.IP "\fB\ev\fR" 8n
Replace with a <vertical tab> character.
.IP "\fB\e#\fR" 8n
Replace with a
\(oq#\(cq
character.
This would be useful when you need a
\(oq#\(cq
as the first character in one of the arguments created
by splitting apart the given
\fIstring\fR.
.IP "\fB\e$\fR" 8n
Replace with a
\(oq$\(cq
character.
.IP "\fB\e_\fR" 8n
If this is found inside of a double-quoted string, then replace it
with a single blank.
If this is found outside of a quoted string, then treat this as the
separator character between new arguments in the original
\fIstring\fR.
.IP "\fB\e""\fR" 8n
Replace with a <double quote> character.
.IP "\fB\e\'\fR" 8n
Replace with a <single quote> character.
.IP "\fB\e\e\fR" 8n
Replace with a backslash character.
.RE
.PD
.PP
The sequences for <single-quote> and backslash are the only sequences
which are recognized inside of a single-quoted string.
The other sequences have no special meaning inside a single-quoted
string.
All escape sequences are recognized inside of a double-quoted string.
It is an error if a single
\(oq\e\(cq
character is followed by a character other than the ones listed above.
.PP
The processing of
\fB\-S\fR
also supports substitution of values from environment variables.
To do this, the name of the environment variable must be inside of
\(oq${}\(cq,
such as:
\fR${SOMEVAR}\fR.
The common shell syntax of
\fR$SOMEVAR\fR
is not supported.
All values substituted will be the values of the environment variables
as they were when the
\fBenv\fR
utility was originally invoked.
Those values will not be checked for any of the escape sequences as
described above.
And any settings of
\fIname\fR=\fIvalue\fR
will not effect the values used for substitution in
\fB\-S\fR
processing.
.PP
Also,
\fB\-S\fR
processing can not reference the value of the special parameters
which are defined by most shells.
For instance,
\fB\-S\fR
can not recognize special parameters such as:
\(oq$*\(cq,
\(oq$@\(cq,
\(oq$#\(cq,
\(oq$?\(cq
or
\(oq$$\(cq
if they appear inside the given
\fIstring\fR.
.SS "Use in shell-scripts"
The
\fBenv\fR
utility is often used as the
\fIinterpreter\fR
on the first line of interpreted scripts, as
described in
execve(2).
.PP
Note that the way the kernel parses the
\(oq#!\(cq
(first line) of an interpreted script has changed as of
FreeBSD\ 6.0.
Prior to that, the
FreeBSD
kernel would split that first line into separate arguments based
on any whitespace (space or <tab> characters) found in the line.
So, if a script named
\fI/usr/local/bin/someport\fR
had a first line of:
.PP
.RS 6n
#!/usr/local/bin/php -n -q -dsafe_mode=0
.RE
.PP
then the
\fI/usr/local/bin/php\fR
program would have been started with the arguments of:
.nf
.sp
.RS 6n
arg[0] = '/usr/local/bin/php'
arg[1] = '-n'
arg[2] = '-q'
arg[3] = '-dsafe_mode=0'
arg[4] = '/usr/local/bin/someport'
.RE
.fi
.PP
plus any arguments the user specified when executing
\fIsomeport\fR.
However, this processing of multiple options on the
\(oq#!\(cq
line is not the way any other operating system parses the
first line of an interpreted script.
So after a change which was made for
FreeBSD\ 6.0
release, that script will result in
\fI/usr/local/bin/php\fR
being started with the arguments of:
.nf
.sp
.RS 6n
arg[0] = '/usr/local/bin/php'
arg[1] = '-n -q -dsafe_mode=0'
arg[2] = '/usr/local/bin/someport'
.RE
.fi
.PP
plus any arguments the user specified.
This caused a significant change in the behavior of a few scripts.
In the case of above script, to have it behave the same way under
FreeBSD\ 6.0
as it did under earlier releases, the first line should be
changed to:
.PP
.RS 6n
#!/usr/bin/env -S /usr/local/bin/php -n -q -dsafe_mode=0
.RE
.PP
The
\fBenv\fR
utility will be started with the entire line as a single
argument:
.PP
.RS 6n
arg[1] = '-S /usr/local/bin/php -n -q -dsafe_mode=0'
.RE
.PP
and then
\fB\-S\fR
processing will split that line into separate arguments before
executing
\fI/usr/local/bin/php\fR.
.SH "ENVIRONMENT"
The
\fBenv\fR
utility uses the
\fRPATH\fR
environment variable to locate the requested
\fIutility\fR
if the name contains no
\(oq/\(cq
characters, unless the
\fB\-P\fR
option has been specified.
.SH "EXIT STATUS"
.br
The \fBenv\fR utility exits\~0 on success, and\~>0 if an error occurs.
An exit status of 126 indicates that
\fIutility\fR
was found, but could not be executed.
An exit status of 127 indicates that
\fIutility\fR
could not be found.
.SH "EXAMPLES"
Since the
\fBenv\fR
utility is often used as part of the first line of an interpreted script,
the following examples show a number of ways that the
\fBenv\fR
utility can be useful in scripts.
.PP
The kernel processing of an interpreted script does not allow a script
to directly reference some other script as its own interpreter.
As a way around this, the main difference between
.PP
.RS 6n
#!/usr/local/bin/foo
.RE
and
.RS 6n
#!/usr/bin/env /usr/local/bin/foo
.RE
.PP
is that the latter works even if
\fI/usr/local/bin/foo\fR
is itself an interpreted script.
.PP
Probably the most common use of
\fBenv\fR
is to find the correct interpreter for a script, when the interpreter
may be in different directories on different systems.
The following example will find the
\(oqperl\(cq
interpreter by searching through the directories specified by
\fRPATH\fR.
.PP
.RS 6n
#!/usr/bin/env perl
.RE
.PP
One limitation of that example is that it assumes the user's value
for
\fRPATH\fR
is set to a value which will find the interpreter you want
to execute.
The
\fB\-P\fR
option can be used to make sure a specific list of directories is
used in the search for
\fIutility\fR.
Note that the
\fB\-S\fR
option is also required for this example to work correctly.
.PP
.RS 6n
#!/usr/bin/env -S -P/usr/local/bin:/usr/bin perl
.RE
.PP
The above finds
\(oqperl\(cq
only if it is in
\fI/usr/local/bin\fR
or
\fI/usr/bin\fR.
That could be combined with the present value of
\fRPATH\fR,
to provide more flexibility.
Note that spaces are not required between the
\fB\-S\fR
and
\fB\-P\fR
options:
.PP
.RS 6n
#!/usr/bin/env -S-P/usr/local/bin:/usr/bin:${PATH} perl
.RE
.SH "COMPATIBILITY"
The
\fBenv\fR
utility accepts the
\fB\-\fR
option as a synonym for
\fB\-i\fR.
.SH "SEE ALSO"
printenv(1),
sh(1),
execvp(3),
environ(7)
.SH "STANDARDS"
The
\fBenv\fR
utility conforms to
IEEE Std 1003.1-2001 (\(LqPOSIX.1\(Rq).
The
\fB\-P\fR, \fB\-S\fR, \fB\-u\fR
and
\fB\-v\fR
options are non-standard extensions supported by
FreeBSD,
but which may not be available on other operating systems.
.SH "HISTORY"
The
\fBenv\fR
command appeared in
4.4BSD.
The
\fB\-P\fR, \fB\-S\fR
and
\fB\-v\fR
options were added in
FreeBSD\ 6.0.
.SH "BUGS"
The
\fBenv\fR
utility does not handle values of
\fIutility\fR
which have an equals sign
(\(oq=\(cq)
in their name, for obvious reasons.
.PP
The
\fBenv\fR
utility does not take multibyte characters into account when
processing the
\fB\-S\fR
option, which may lead to incorrect results in some locales.
