.TH "PRINTF" "1" "April 14, 2005" "GNO" "General Commands Manual"
.SH "NAME"
\fBprintf\fR
\- formatted output
.SH "SYNOPSIS"
.HP 7n
\fBprintf\fR
\fIformat\fR\ [\fIarguments\ ...\fR]
.SH "DESCRIPTION"
The
\fBprintf\fR
utility formats and prints its arguments, after the first, under control
of the
\fIformat\fR.
The
\fIformat\fR
is a character string which contains three types of objects: plain characters,
which are simply copied to standard output, character escape sequences which
are converted and copied to the standard output, and format specifications,
each of which causes printing of the next successive
\fIargument\fR.
.PP
The
\fIarguments\fR
after the first are treated as strings if the corresponding format is
either
\fBc\fR, \fBb\fR
or
\fBs\fR;
otherwise it is evaluated as a C constant, with the following extensions:
.PP
.RS 6n
.PD 0
.IP "\fB\(bu\fR" 4n
A leading plus or minus sign is allowed.
.IP "\fB\(bu\fR" 4n
If the leading character is a single or double quote, the value is the
\fRASCII\fR
code of the next character.
.RE
.PD
.PP
The format string is reused as often as necessary to satisfy the
\fIarguments\fR.
Any extra format specifications are evaluated with zero or the null
string.
.PP
Character escape sequences are in backslash notation as defined in the
ANSI X3.159-1989 (\(LqANSI\~C89\(Rq),
with extensions.
The characters and their meanings
are as follows:
.PP
.RS 6n
.PD 0
.IP "\fB\ea\fR" 8n
Write a <bell> character.
.IP "\fB\eb\fR" 8n
Write a <backspace> character.
.IP "\fB\ec\fR" 8n
Ignore remaining characters in this string.
.IP "\fB\ef\fR" 8n
Write a <form-feed> character.
.IP "\fB\en\fR" 8n
Write a <new-line> character.
.IP "\fB\er\fR" 8n
Write a <carriage return> character.
.IP "\fB\et\fR" 8n
Write a <tab> character.
.IP "\fB\ev\fR" 8n
Write a <vertical tab> character.
.IP "\fB\e\'\fR" 8n
Write a <single quote> character.
.IP "\fB\e\e\fR" 8n
Write a backslash character.
.IP "\fB\e\fR\fInum\fR" 8n
.IP "\fB\e0\fR\fInum\fR" 8n
Write an 8-bit character whose
\fRASCII\fR
value is the 1-, 2-, or 3-digit
octal number
\fInum\fR.
.RE
.PD
.PP
Each format specification is introduced by the percent character
(``%'').
The remainder of the format specification includes,
in the following order:
.IP "Zero or more of the following flags:" 8n
.PP
.RS 8n
.PD 0
.IP "\fB#\fR" 8n
A `#' character
specifying that the value should be printed in an ``alternate form''.
For
\fBc\fR, \fBd\fR,
and
\fBs\fR,
formats, this option has no effect.
For the
\fBo\fR
formats the precision of the number is increased to force the first
character of the output string to a zero.
For the
\fBx\fR
(\fBX\fR)
format, a non-zero result has the string
\fR0x\fR
(\fR0X\fR)
prepended to it.
For
\fBe\fR, \fBE\fR, \fBf\fR, \fBg\fR,
and
\fBG\fR,
formats, the result will always contain a decimal point, even if no
digits follow the point (normally, a decimal point only appears in the
results of those formats if a digit follows the decimal point).
For
\fBg\fR
and
\fBG\fR
formats, trailing zeros are not removed from the result as they
would otherwise be;
.PD
.IP "\fB\&\-\fR" 8n
A minus sign `\-' which specifies
\fIleft adjustment\fR
of the output in the indicated field;
.IP "\fB\&+\fR" 8n
A `+' character specifying that there should always be
a sign placed before the number when using signed formats.
.IP "\(oq\&\ \&\(cq" 8n
A space specifying that a blank should be left before a positive number
for a signed format.
A `+' overrides a space if both are used;
.IP "\fB\&0\fR" 8n
A zero `0' character indicating that zero-padding should be used
rather than blank-padding.
A `\-' overrides a `0' if both are used;
.PD 0
.PP
.RE
.PD
.IP "Field Width:" 8n
An optional digit string specifying a
\fIfield width\fR;
if the output string has fewer characters than the field width it will
be blank-padded on the left (or right, if the left-adjustment indicator
has been given) to make up the field width (note that a leading zero
is a flag, but an embedded zero is part of a field width);
.IP "Precision:" 8n
An optional period,
\(oq\fB\&.\&\fR\(cq,
followed by an optional digit string giving a
\fIprecision\fR
which specifies the number of digits to appear after the decimal point,
for
\fBe\fR
and
\fBf\fR
formats, or the maximum number of characters to be printed
from a string; if the digit string is missing, the precision is treated
as zero;
.IP "Format:" 8n
.br
A character which indicates the type of format to use (one of
\fBdiouxXfFeEgGaAcsb\fR).
The uppercase formats differ from their lowercase counterparts only in
that the output of the former is entirely in uppercase.
The floating-point format specifiers
(\fBfFeEgGaA\fR)
may be prefixed by an
\fBL\fR
to request that additional precision be used, if available.
.PP
A field width or precision may be
\(oq\fB\&*\fR\(cq
instead of a digit string.
In this case an
\fIargument\fR
supplies the field width or precision.
.PP
The format characters and their meanings are:
.IP "\fBdiouXx\fR" 12n
The
\fIargument\fR
is printed as a signed decimal (d or i), unsigned octal, unsigned decimal,
or unsigned hexadecimal (X or x), respectively.
.IP "\fBfF\fR" 12n
The
\fIargument\fR
is printed in the style `[\-]ddd.ddd' where the number of d's
after the decimal point is equal to the precision specification for
the argument.
If the precision is missing, 6 digits are given; if the precision
is explicitly 0, no digits and no decimal point are printed.
The values infinity and NaN are printed as
\(oqinf\(cq
and
\(oqnan\(cq,
respectively.
.IP "\fBeE\fR" 12n
The
\fIargument\fR
is printed in the style
\fBe\fR
\(oq[-\fId.ddd\fR\(+-\fIdd\fR]\(cq
where there
is one digit before the decimal point and the number after is equal to
the precision specification for the argument; when the precision is
missing, 6 digits are produced.
The values infinity and NaN are printed as
\(oqinf\(cq
and
\(oqnan\(cq,
respectively.
.IP "\fBgG\fR" 12n
The
\fIargument\fR
is printed in style
\fBf\fR
(\fBF\fR)
or in style
\fBe\fR
(\fBE\fR)
whichever gives full precision in minimum space.
.IP "\fBaA\fR" 12n
The
\fIargument\fR
is printed in style
\(oq[-\fIh.hhh\fR\(+-\fRp\fR\fId\fR]\(cq
where there is one digit before the hexadecimal point and the number
after is equal to the precision specification for the argument;
when the precision is missing, enough digits are produced to convey
the argument's exact double-precision floating-point representation.
The values infinity and NaN are printed as
\(oqinf\(cq
and
\(oqnan\(cq,
respectively.
.IP "\fBc\fR" 12n
The first character of
\fIargument\fR
is printed.
.IP "\fBs\fR" 12n
Characters from the string
\fIargument\fR
are printed until the end is reached or until the number of characters
indicated by the precision specification is reached; however if the
precision is 0 or missing, all characters in the string are printed.
.IP "\fBb\fR" 12n
As for
\fBs\fR,
but interpret character escapes in backslash notation in the string
\fIargument\fR.
.IP "\fB\&%\fR" 12n
Print a `%'; no argument is used.
.PP
The decimal point
character is defined in the program's locale (category
\fRLC_NUMERIC\fR).
.PP
In no case does a non-existent or small field width cause truncation of
a field; padding takes place only if the specified field width exceeds
the actual width.
.SH "EXIT STATUS"
.br
The \fBprintf\fR utility exits\~0 on success, and\~>0 if an error occurs.
.SH "COMPATIBILITY"
The traditional
BSD
behavior of converting arguments of numeric formats not beginning
with a digit to the
\fRASCII\fR
code of the first character is not supported.
.SH "SEE ALSO"
echo(1),
printf(3)
.SH "STANDARDS"
The
\fBprintf\fR
command is expected to be compatible with the
IEEE Std 1003.2 (\(LqPOSIX.2\(Rq)
specification.
.SH "HISTORY"
The
\fBprintf\fR
command appeared in
4.3BSD-Reno.
It is modeled
after the standard library function,
printf(3).
.SH "BUGS"
Since the floating point numbers are translated from
\fRASCII\fR
to floating-point and
then back again, floating-point precision may be lost.
(By default, the number is translated to an IEEE-754 double-precision
value before being printed.
The
\fBL\fR
modifier may produce additional precision, depending on the hardware platform.)
.PP
\fRANSI\fR
hexadecimal character constants were deliberately not provided.
.PP
The escape sequence \e000 is the string terminator.
When present in the argument for the
\fBb\fR
format, the argument will be truncated at the \e000 character.
.PP
Multibyte characters are not recognized in format strings (this is only
a problem if
\(oq%\(cq
can appear inside a multibyte character).
